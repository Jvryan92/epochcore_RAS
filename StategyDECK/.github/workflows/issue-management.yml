name: Issue Management

on:
  issues:
    types: [opened, edited]

jobs:
  label-issues:
    runs-on: ubuntu-latest
    steps:
    - name: Auto-label issues
      uses: github/issue-labeler@v3.4
      with:
        configuration-path: .github/issue-labeler.yml
        repo-token: ${{ secrets.GITHUB_TOKEN }}

  assign-issues:
    runs-on: ubuntu-latest
    steps:
    - name: Auto-assign based on labels
      uses: actions/github-script@v7
      with:
        script: |
          const issue = context.payload.issue;
          const title = issue.title.toLowerCase();
          const body = issue.body?.toLowerCase() || '';
          
          // Define assignment rules based on keywords
          const assignmentRules = {
            'bug': ['Jvryan92'],
            'enhancement': ['Jvryan92'],
            'documentation': ['Jvryan92'],
            'design': ['Jvryan92'],
            'icon': ['Jvryan92'],
            'asset': ['Jvryan92'],
            'script': ['Jvryan92'],
            'python': ['Jvryan92']
          };
          
          // Check for keywords in title and body
          let assignees = new Set();
          for (const [keyword, users] of Object.entries(assignmentRules)) {
            if (title.includes(keyword) || body.includes(keyword)) {
              users.forEach(user => assignees.add(user));
            }
          }
          
          // Assign the issue if we found matching assignees
          if (assignees.size > 0) {
            await github.rest.issues.addAssignees({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              assignees: Array.from(assignees)
            });
          }

  notify-team:
    runs-on: ubuntu-latest
    if: github.event.action == 'opened'
    steps:
    - name: Notify team of high priority issues
      uses: actions/github-script@v7
      with:
        script: |
          const issue = context.payload.issue;
          const title = issue.title.toLowerCase();
          const body = issue.body?.toLowerCase() || '';
          
          // Check for high priority keywords
          const highPriorityKeywords = ['urgent', 'critical', 'broken', 'error', 'failed'];
          const isHighPriority = highPriorityKeywords.some(keyword => 
            title.includes(keyword) || body.includes(keyword)
          );
          
          if (isHighPriority) {
            // Add urgent label
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              labels: ['urgent', 'needs-attention']
            });
            
            // Comment with notification
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              body: 'ðŸš¨ **High Priority Issue Detected**\n\nThis issue has been flagged as high priority and assigned for immediate attention.'
            });
          }