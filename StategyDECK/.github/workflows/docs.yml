name: Documentation Updates

on:
  push:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'scripts/**'
      - '*.md'
      - 'requirements.txt'
  pull_request:
    paths:
      - 'docs/**'
      - 'scripts/**'
      - '*.md'
      - 'requirements.txt'

jobs:
  generate-docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # Install documentation tools
        pip install pydoc-markdown sphinx sphinx-autodoc-typehints

    - name: Generate API documentation
      run: |
        # Create docs directory if it doesn't exist
        mkdir -p docs/api
        
        # Generate Python module documentation
        python -c "
        import sys
        sys.path.append('scripts')
        import generate_icons
        import inspect
        
        # Generate markdown documentation
        with open('docs/api/generate_icons.md', 'w') as f:
            f.write('# Icon Generation API\\n\\n')
            f.write('Auto-generated documentation for the icon generation script.\\n\\n')
            f.write('## Functions\\n\\n')
            
            for name, obj in inspect.getmembers(generate_icons):
                if inspect.isfunction(obj) and not name.startswith('_'):
                    f.write(f'### {name}\\n\\n')
                    doc = inspect.getdoc(obj)
                    if doc:
                        f.write(f'{doc}\\n\\n')
                    else:
                        f.write('No documentation available.\\n\\n')
                    
                    # Get function signature
                    try:
                        sig = inspect.signature(obj)
                        f.write(f'**Signature:** `{name}{sig}`\\n\\n')
                    except:
                        pass
            
            f.write('## Constants\\n\\n')
            for name, obj in inspect.getmembers(generate_icons):
                if not name.startswith('_') and not inspect.isfunction(obj) and isinstance(obj, dict):
                    f.write(f'### {name}\\n\\n')
                    f.write(f'```python\\n{obj}\\n```\\n\\n')
        "

    - name: Generate usage examples
      run: |
        # Create examples documentation
        cat > docs/api/examples.md << 'EOF'
        # Usage Examples
        
        ## Basic Icon Generation
        
        ```bash
        # Generate all icon variants
        python scripts/generate_icons.py
        ```
        
        ## CSV Configuration
        
        The script reads from `strategy_icon_variant_matrix.csv` with the following format:
        
        ```csv
        Mode,Finish,Size (px),Context,Filename
        light,flat-orange,16,web,strategy_icon-light-flat-orange-16px.png
        dark,matte-carbon,32,print,strategy_icon-dark-matte-carbon-32px.png
        ```
        
        ### Available Modes
        - `light`: Light background with colored foreground
        - `dark`: Dark background with colored foreground
        
        ### Available Finishes
        - `flat-orange`: Brand orange color
        - `matte-carbon`: Matte dark color
        - `satin-black`: Glossy black
        - `burnt-orange`: Darker orange variant
        - `copper-foil`: Metallic copper
        - `embossed-paper`: Light embossed effect
        
        ### Size Recommendations
        - **16px, 32px**: Uses micro master (simpler design)
        - **48px and above**: Uses standard master (detailed design)
        
        ## Output Structure
        
        Generated icons are organized as:
        ```
        assets/icons/
        ├── light/
        │   ├── flat-orange/
        │   │   └── 16px/web/strategy_icon-light-flat-orange-16px.svg
        │   └── matte-carbon/
        └── dark/
            └── copper-foil/
        ```
        
        ## Dependencies
        
        - **Required**: Python 3.8+
        - **Optional**: cairosvg (for PNG export)
        
        ```bash
        pip install -r requirements.txt
        ```
        EOF

    - name: Update README with workflow documentation
      run: |
        # Backup original README
        cp README.md README.md.bak
        
        # Generate enhanced README
        cat > README.md << 'EOF'
        # StrategyDECK
        
        A comprehensive icon generation system for the StrategyDECK brand, featuring automated CI/CD workflows and asset management.
        
        ## 🚀 Features
        
        - **Icon Generation**: Automated SVG/PNG icon generation with multiple variants
        - **CI/CD Pipeline**: Automated testing, building, and deployment
        - **Issue Management**: Auto-labeling and assignment based on keywords
        - **PR Management**: Automated reviewer assignment and notifications
        - **Documentation**: Auto-generated API docs and usage guides
        
        ## 📦 Generated Assets
        
        The system generates icon variants with:
        - Multiple color schemes (light/dark modes)
        - Various finishes (flat, matte, copper, etc.)
        - Different sizes (16px to 48px+)
        - Context-specific outputs (web, print)
        
        ## 🔧 Usage
        
        ```bash
        # Install dependencies
        pip install -r requirements.txt
        
        # Generate all icon variants
        python scripts/generate_icons.py
        ```
        
        ## 🤖 GitHub Actions Workflows
        
        ### Continuous Integration (`ci.yml`)
        - **Triggers**: Push to main, Pull requests
        - **Actions**: 
          - Python linting (flake8, black)
          - Unit testing (pytest)
          - Icon generation testing
          - Multi-version Python testing (3.8-3.11)
        
        ### Continuous Deployment (`cd.yml`)
        - **Triggers**: Push to main, Manual dispatch
        - **Actions**:
          - Generate and commit icon assets
          - Create timestamped releases
          - Deploy to GitHub Pages
        
        ### Issue Management (`issue-management.yml`)
        - **Triggers**: Issue creation/editing
        - **Actions**:
          - Auto-label based on keywords
          - Assign to appropriate team members
          - Priority notification for urgent issues
        
        ### Pull Request Management (`pr-management.yml`)
        - **Triggers**: PR creation, reviews
        - **Actions**:
          - Auto-assign reviewers based on changed files
          - Size labeling (XS, S, M, L, XL)
          - Title format suggestions
          - Ready-for-review notifications
        
        ### Documentation Updates (`docs.yml`)
        - **Triggers**: Changes to docs, scripts, README
        - **Actions**:
          - Auto-generate API documentation
          - Update usage examples
          - Maintain documentation consistency
        
        ## 📁 Project Structure
        
        ```
        StrategyDECK/
        ├── .github/
        │   ├── workflows/          # GitHub Actions
        │   └── issue-labeler.yml   # Issue labeling rules
        ├── assets/
        │   ├── masters/            # Master SVG files
        │   └── icons/              # Generated variants
        ├── scripts/
        │   └── generate_icons.py   # Main generation script
        ├── tests/
        │   └── test_generate_icons.py
        ├── docs/
        │   └── api/                # Auto-generated docs
        ├── strategy_icon_variant_matrix.csv
        └── requirements.txt
        ```
        
        ## 🧪 Testing
        
        ```bash
        # Run tests
        pytest tests/ -v
        
        # Run linting
        flake8 scripts/
        black --check scripts/ tests/
        ```
        
        ## 📖 Documentation
        
        - [API Documentation](docs/api/generate_icons.md)
        - [Usage Examples](docs/api/examples.md)
        - [Workflow Configuration](.github/workflows/)
        
        ## 🤝 Contributing
        
        1. Fork the repository
        2. Create a feature branch
        3. Make your changes
        4. Run tests and linting
        5. Submit a pull request
        
        The automated workflows will handle:
        - Code quality checks
        - Asset generation
        - Documentation updates
        - Reviewer assignment
        
        ## 📄 License
        
        This project is part of the StrategyDECK brand assets.
        EOF

    - name: Configure git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Commit documentation updates
      run: |
        git add docs/ README.md
        if git diff --staged --quiet; then
          echo "No documentation changes to commit"
        else
          git commit -m "📚 Auto-update documentation [skip ci]"
          if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
            git push
          fi
        fi

    - name: Deploy docs to GitHub Pages
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs
        destination_dir: docs
        commit_message: "📖 Deploy documentation to GitHub Pages"