name: Repository Automation Complete
# Enhanced workflow for full repository automation including agent registry sync,
# continuity rituals, zip vault snapshots, and robust merge logic

on:
  # Scheduled automation
  schedule:
    - cron: '0 2 * * 1'  # Weekly at 2 AM UTC on Monday
    - cron: '0 6 * * *'  # Daily at 6 AM UTC
    - cron: '0 */6 * * *' # Every 6 hours for snapshots
  
  # Manual trigger with options
  workflow_dispatch:
    inputs:
      automation_type:
        description: 'Type of automation to run'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - agent_sync
          - repo_population
          - continuity_ritual
          - zip_vault
          - merge_automation
      priority:
        description: 'Priority level'
        required: false
        default: 'normal'
        type: choice
        options:
          - low
          - normal
          - high
          - critical
      custom_branch:
        description: 'Custom branch for merge automation'
        required: false
        type: string
      
  # Trigger on pushes to main branch
  push:
    branches: [ main ]
    
  # Trigger on pull requests
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, ready_for_review]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Job 1: Setup and Initialization
  setup:
    name: Setup and Validation
    runs-on: ubuntu-latest
    outputs:
      automation_matrix: ${{ steps.setup.outputs.automation_matrix }}
      should_run_full: ${{ steps.setup.outputs.should_run_full }}
      priority: ${{ steps.setup.outputs.priority }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install schedule pyyaml psutil rich
      
      - name: Validate Repository Structure
        id: validate
        run: |
          echo "Validating repository structure..."
          
          # Check for critical files
          critical_files=("integration.py" "requirements.txt" "README.md")
          missing_files=()
          
          for file in "${critical_files[@]}"; do
            if [[ ! -f "$file" ]]; then
              missing_files+=("$file")
            fi
          done
          
          if [[ ${#missing_files[@]} -gt 0 ]]; then
            echo "Missing critical files: ${missing_files[*]}"
            echo "structure_valid=false" >> $GITHUB_OUTPUT
          else
            echo "structure_valid=true" >> $GITHUB_OUTPUT
          fi
          
          # Test Python imports
          python -c "import yaml, psutil, json; print('Dependencies OK')"
          
          echo "Repository validation completed"
      
      - name: Determine Automation Scope
        id: setup
        run: |
          echo "Setting up automation scope..."
          
          # Determine automation type
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            automation_type="${{ github.event.inputs.automation_type }}"
            priority="${{ github.event.inputs.priority }}"
          elif [[ "${{ github.event_name }}" == "schedule" ]]; then
            if [[ "${{ github.event.schedule }}" == "0 2 * * 1" ]]; then
              automation_type="full"
              priority="normal"
            elif [[ "${{ github.event.schedule }}" == "0 6 * * *" ]]; then
              automation_type="continuity_ritual"
              priority="normal"
            else
              automation_type="zip_vault"
              priority="low"
            fi
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            automation_type="agent_sync"
            priority="high"
          else
            automation_type="agent_sync"
            priority="normal"
          fi
          
          echo "automation_type=$automation_type" >> $GITHUB_OUTPUT
          echo "priority=$priority" >> $GITHUB_OUTPUT
          
          # Create automation matrix
          if [[ "$automation_type" == "full" ]]; then
            echo "should_run_full=true" >> $GITHUB_OUTPUT
            automation_matrix='["agent_sync", "repo_population", "continuity_ritual", "zip_vault"]'
          else
            echo "should_run_full=false" >> $GITHUB_OUTPUT
            automation_matrix='["'$automation_type'"]'
          fi
          
          echo "automation_matrix=$automation_matrix" >> $GITHUB_OUTPUT
          echo "Automation scope: $automation_type (priority: $priority)"

  # Job 2: Agent Registry Synchronization
  agent-sync:
    name: Agent Registry Sync
    runs-on: ubuntu-latest
    needs: setup
    if: contains(fromJson(needs.setup.outputs.automation_matrix), 'agent_sync')
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Execute Agent Registry Sync
        run: |
          echo "Starting agent registry synchronization..."
          
          # Run agent sync
          python agent_register_sync.py --sync > agent_sync_result.json
          
          # Display results
          echo "Agent sync results:"
          cat agent_sync_result.json
          
          # Check if sync was successful
          if jq -e '.status == "success"' agent_sync_result.json > /dev/null; then
            echo "Agent registry synchronization completed successfully"
          else
            echo "Agent registry synchronization failed"
            exit 1
          fi
      
      - name: Validate Agent Registry
        run: |
          echo "Validating agent registry..."
          python agent_register_sync.py --status > agent_status.json
          
          echo "Agent registry status:"
          cat agent_status.json
          
          # Check registry health
          health_status=$(jq -r '.health_status' agent_status.json)
          if [[ "$health_status" != "healthy" ]]; then
            echo "Warning: Agent registry health is $health_status"
          fi
      
      - name: Upload Agent Sync Artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: agent-sync-results
          path: |
            agent_sync_result.json
            agent_status.json
            logs/agent_sync.log
          retention-days: 30

  # Job 3: Repository Tree Population
  repo-population:
    name: Repository Tree Population
    runs-on: ubuntu-latest
    needs: setup
    if: contains(fromJson(needs.setup.outputs.automation_matrix), 'repo_population')
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Execute Repository Population
        run: |
          echo "Starting repository file tree population..."
          
          # Run population
          python populate_repo_tree.py --populate > population_result.json
          
          # Display results
          echo "Population results:"
          cat population_result.json
          
          # Check if population was successful
          if jq -e '.status == "success"' population_result.json > /dev/null; then
            echo "Repository population completed successfully"
            
            # Get summary
            directories_created=$(jq -r '.directories_created' population_result.json)
            files_created=$(jq -r '.files_created' population_result.json)
            echo "Created $directories_created directories and $files_created files"
          else
            echo "Repository population failed"
            exit 1
          fi
      
      - name: Validate Repository Structure
        run: |
          echo "Validating repository structure..."
          python populate_repo_tree.py --status > structure_status.json
          
          echo "Structure status:"
          cat structure_status.json
          
          # Check structure completeness
          structure_complete=$(jq -r '.structure_complete' structure_status.json)
          if [[ "$structure_complete" != "true" ]]; then
            echo "Warning: Repository structure is incomplete"
          fi
      
      - name: Commit New Files
        if: success()
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Add new files
          git add .
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No new files to commit"
          else
            git commit -m "Automated repository tree population
            
            - Created missing directories and files
            - Updated repository structure
            - Generated by populate_repo_tree.py
            
            [skip ci]"
            
            git push
            echo "Committed and pushed repository structure updates"
          fi
      
      - name: Upload Population Artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: repo-population-results
          path: |
            population_result.json
            structure_status.json
            logs/population.log
          retention-days: 30

  # Job 4: Continuity Ritual Automation
  continuity-ritual:
    name: Continuity Ritual
    runs-on: ubuntu-latest
    needs: setup
    if: contains(fromJson(needs.setup.outputs.automation_matrix), 'continuity_ritual')
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install schedule
      
      - name: Execute Health Check Ritual
        run: |
          echo "Executing health check ritual..."
          python continuity_ritual.py --ritual health_check > health_result.json
          
          echo "Health check results:"
          cat health_result.json
          
          # Check system health
          if jq -e '.result.system_status == "healthy"' health_result.json > /dev/null; then
            echo "System health check passed"
          else
            echo "Warning: System health issues detected"
            jq -r '.result.issues_found[]' health_result.json || true
          fi
      
      - name: Execute Metric Collection Ritual
        run: |
          echo "Executing metric collection ritual..."
          python continuity_ritual.py --ritual metric_collection > metrics_result.json
          
          echo "Metric collection results:"
          cat metrics_result.json
      
      - name: Execute System Backup Ritual
        run: |
          echo "Executing system backup ritual..."
          python continuity_ritual.py --ritual system_backup > backup_result.json
          
          echo "Backup results:"
          cat backup_result.json
          
          # Check backup success
          if jq -e '.result.status == "completed"' backup_result.json > /dev/null; then
            files_backed_up=$(jq -r '.result.files_backed_up' backup_result.json)
            echo "System backup completed: $files_backed_up files backed up"
          else
            echo "Warning: System backup failed"
          fi
      
      - name: Upload Continuity Artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: continuity-ritual-results
          path: |
            health_result.json
            metrics_result.json
            backup_result.json
            logs/continuity_rituals.log
            reports/
            backups/
          retention-days: 30

  # Job 5: Zip Vault Snapshot Creation
  zip-vault:
    name: Zip Vault Snapshots
    runs-on: ubuntu-latest
    needs: setup
    if: contains(fromJson(needs.setup.outputs.automation_matrix), 'zip_vault')
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Create Full System Snapshot
        run: |
          echo "Creating full system snapshot..."
          python zip_vault_creator.py --snapshot full_system > snapshot_result.json
          
          echo "Snapshot results:"
          cat snapshot_result.json
          
          # Check snapshot success
          if jq -e '.status == "success"' snapshot_result.json > /dev/null; then
            snapshot_name=$(jq -r '.snapshot_name' snapshot_result.json)
            snapshot_size=$(jq -r '.compressed_size_mb' snapshot_result.json)
            files_included=$(jq -r '.files_included' snapshot_result.json)
            
            echo "Snapshot created successfully:"
            echo "  Name: $snapshot_name"
            echo "  Size: ${snapshot_size} MB"
            echo "  Files: $files_included"
          else
            echo "Error: Snapshot creation failed"
            exit 1
          fi
      
      - name: Create Configuration Backup Snapshot
        run: |
          echo "Creating configuration backup snapshot..."
          python zip_vault_creator.py --snapshot config_backup --name "config_$(date +%Y%m%d_%H%M%S)" > config_snapshot_result.json
          
          echo "Configuration snapshot results:"
          cat config_snapshot_result.json
      
      - name: Verify Vault Integrity
        run: |
          echo "Verifying vault integrity..."
          python zip_vault_creator.py --verify > integrity_result.json
          
          echo "Integrity verification results:"
          cat integrity_result.json
          
          # Check integrity
          if jq -e '.integrity.overall_status == "healthy"' integrity_result.json > /dev/null; then
            echo "Vault integrity verification passed"
          else
            echo "Warning: Vault integrity issues detected"
          fi
      
      - name: List Vault Contents
        run: |
          echo "Listing vault contents..."
          python zip_vault_creator.py --list > vault_listing.json
          
          echo "Vault contents:"
          cat vault_listing.json
      
      - name: Upload Vault Artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: zip-vault-results
          path: |
            snapshot_result.json
            config_snapshot_result.json
            integrity_result.json
            vault_listing.json
            logs/vault_operations.log
          retention-days: 30
      
      - name: Upload Vault Snapshots
        uses: actions/upload-artifact@v3
        if: success()
        with:
          name: vault-snapshots
          path: |
            vault/snapshots/*.zip
          retention-days: 90

  # Job 6: Integration Testing
  integration-test:
    name: Integration Testing
    runs-on: ubuntu-latest
    needs: [setup, agent-sync, repo-population]
    if: always() && (needs.setup.result == 'success')
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run Integration Tests
        run: |
          echo "Running integration tests..."
          
          # Test system initialization
          python integration.py setup-demo
          
          # Test workflow execution
          python integration.py run-workflow > workflow_result.json
          
          # Test system validation
          python integration.py validate > validation_result.json
          
          echo "Integration test results:"
          echo "Workflow execution:"
          cat workflow_result.json
          echo "System validation:"
          cat validation_result.json
      
      - name: Run Unit Tests
        run: |
          echo "Running unit tests..."
          python -m unittest discover tests/ -v > test_results.txt 2>&1
          
          echo "Unit test results:"
          cat test_results.txt
      
      - name: Test New Automation Scripts
        run: |
          echo "Testing new automation scripts..."
          
          # Test agent sync
          python agent_register_sync.py --status
          
          # Test population
          python populate_repo_tree.py --status
          
          # Test vault
          python zip_vault_creator.py --status
          
          # Test merge automation
          python merge_automation.py --status
          
          echo "All automation scripts tested successfully"
      
      - name: Upload Integration Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: |
            workflow_result.json
            validation_result.json
            test_results.txt
            logs/
          retention-days: 30

  # Job 7: Merge Automation (for PR events)
  merge-automation:
    name: Merge Automation
    runs-on: ubuntu-latest
    needs: [setup, integration-test]
    if: github.event_name == 'pull_request' && needs.integration-test.result == 'success'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Setup Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Validate Merge Conditions
        id: validate-merge
        run: |
          echo "Validating merge conditions..."
          
          source_branch="${{ github.head_ref }}"
          target_branch="${{ github.base_ref }}"
          
          echo "Source branch: $source_branch"
          echo "Target branch: $target_branch"
          
          # Check if this is a merge to main
          if [[ "$target_branch" == "main" ]]; then
            echo "merge_to_main=true" >> $GITHUB_OUTPUT
          else
            echo "merge_to_main=false" >> $GITHUB_OUTPUT
          fi
          
          echo "source_branch=$source_branch" >> $GITHUB_OUTPUT
          echo "target_branch=$target_branch" >> $GITHUB_OUTPUT
      
      - name: Execute Merge Validation
        if: steps.validate-merge.outputs.merge_to_main == 'true'
        run: |
          echo "Executing merge validation..."
          
          # Use Python merge automation for validation
          python merge_automation.py --merge \
            "${{ steps.validate-merge.outputs.source_branch }}" \
            "${{ steps.validate-merge.outputs.target_branch }}" \
            --strategy merge > merge_validation.json
          
          echo "Merge validation results:"
          cat merge_validation.json
          
          # Check validation results
          merge_status=$(jq -r '.status' merge_validation.json)
          if [[ "$merge_status" == "completed" ]]; then
            echo "Merge validation passed"
          else
            echo "Merge validation failed: $merge_status"
            
            # Add PR comment with results
            if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              echo "Would add PR comment with merge validation results"
            fi
          fi
      
      - name: Upload Merge Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: merge-automation-results
          path: |
            merge_validation.json
            logs/merge_operations.log
          retention-days: 30

  # Job 8: Reporting and Notifications
  reporting:
    name: Generate Reports
    runs-on: ubuntu-latest
    needs: [setup, agent-sync, repo-population, continuity-ritual, zip-vault, integration-test]
    if: always() && needs.setup.result == 'success'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Download All Artifacts
        uses: actions/download-artifact@v3
        with:
          path: automation-results
      
      - name: Generate Automation Report
        run: |
          echo "Generating automation report..."
          
          # Create comprehensive report
          cat > automation_report.md << 'EOF'
          # EpochCore RAS Automation Report
          
          **Generated:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Workflow:** ${{ github.workflow }}
          **Run ID:** ${{ github.run_id }}
          **Trigger:** ${{ github.event_name }}
          
          ## Automation Results Summary
          
          ### Job Status Overview
          - **Setup:** ${{ needs.setup.result }}
          - **Agent Sync:** ${{ needs.agent-sync.result }}
          - **Repo Population:** ${{ needs.repo-population.result }}
          - **Continuity Ritual:** ${{ needs.continuity-ritual.result }}
          - **Zip Vault:** ${{ needs.zip-vault.result }}
          - **Integration Test:** ${{ needs.integration-test.result }}
          
          ### Key Metrics
          EOF
          
          # Add metrics from results files
          if [[ -f "automation-results/agent-sync-results/agent_sync_result.json" ]]; then
            echo "- **Agents Synced:** $(jq -r '.agents_synced // 0' automation-results/agent-sync-results/agent_sync_result.json)" >> automation_report.md
          fi
          
          if [[ -f "automation-results/repo-population-results/population_result.json" ]]; then
            echo "- **Files Created:** $(jq -r '.files_created // 0' automation-results/repo-population-results/population_result.json)" >> automation_report.md
            echo "- **Directories Created:** $(jq -r '.directories_created // 0' automation-results/repo-population-results/population_result.json)" >> automation_report.md
          fi
          
          if [[ -f "automation-results/zip-vault-results/snapshot_result.json" ]]; then
            echo "- **Snapshot Size:** $(jq -r '.compressed_size_mb // 0' automation-results/zip-vault-results/snapshot_result.json) MB" >> automation_report.md
          fi
          
          echo "
          
          ### Recommendations
          
          Based on the automation results, the system recommends:
          " >> automation_report.md
          
          # Add recommendations based on results
          if [[ "${{ needs.agent-sync.result }}" == "success" ]]; then
            echo "- ✅ Agent registry is synchronized and healthy" >> automation_report.md
          else
            echo "- ⚠️ Agent registry synchronization needs attention" >> automation_report.md
          fi
          
          if [[ "${{ needs.repo-population.result }}" == "success" ]]; then
            echo "- ✅ Repository structure is complete and up-to-date" >> automation_report.md
          else
            echo "- ⚠️ Repository structure may need manual review" >> automation_report.md
          fi
          
          echo "Automation report generated"
          cat automation_report.md
      
      - name: Create Summary Comment
        if: github.event_name == 'pull_request'
        run: |
          echo "Would create PR comment with automation summary"
          echo "PR Number: ${{ github.event.number }}"
      
      - name: Upload Final Report
        uses: actions/upload-artifact@v3
        with:
          name: automation-report
          path: |
            automation_report.md
            automation-results/
          retention-days: 90

  # Job 9: Cleanup and Maintenance
  cleanup:
    name: Cleanup and Maintenance
    runs-on: ubuntu-latest
    needs: [reporting]
    if: always()
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Cleanup Old Artifacts
        run: |
          echo "Performing cleanup tasks..."
          
          # This would clean up old workflow artifacts, logs, etc.
          # For now, just log the cleanup intention
          echo "Cleanup tasks completed"
      
      - name: Update System Metrics
        run: |
          echo "Updating system metrics..."
          
          # Create metrics summary
          echo "{
            \"workflow_run_id\": \"${{ github.run_id }}\",
            \"completion_time\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
            \"trigger\": \"${{ github.event_name }}\",
            \"automation_type\": \"${{ needs.setup.outputs.automation_matrix }}\",
            \"success_rate\": \"calculated_based_on_job_results\"
          }" > workflow_metrics.json
          
          echo "System metrics updated"
          cat workflow_metrics.json
      
      - name: Final Status Report
        run: |
          echo "=== EpochCore RAS Automation Workflow Complete ==="
          echo "Workflow ID: ${{ github.run_id }}"
          echo "Duration: ${{ github.event.created_at }} - $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo "Trigger: ${{ github.event_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref_name }}"
          echo ""
          echo "All automation tasks have been processed."
          echo "Check individual job results for detailed information."